import { Canvas } from '@react-three/fiber'
import { OrbitControls } from '@react-three/drei'
import { useState, useEffect } from 'react'
import { getAuth, onAuthStateChanged, signInWithPopup, GoogleAuthProvider } from 'firebase/auth'
import { initializeApp } from 'firebase/app'
import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'

const firebaseConfig = {
  apiKey: 'YOUR_API_KEY',
  authDomain: 'YOUR_AUTH_DOMAIN',
  projectId: 'YOUR_PROJECT_ID',
  storageBucket: 'YOUR_STORAGE_BUCKET',
  messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',
  appId: 'YOUR_APP_ID'
}

const app = initializeApp(firebaseConfig)
const auth = getAuth(app)
const db = getFirestore(app)

const environments = {
  personal: 'My Personal World',
  plaza: 'City Plaza',
  pub: 'Cozy Pub',
  beach: 'Paradise Beach'
}

function Scene({ environment, user }) {
  return (
    <>
      <ambientLight intensity={0.5} />
      <pointLight position={[10, 10, 10]} />
      <mesh position={[0, 0, 0]}>
        <sphereGeometry args={[1, 32, 32]} />
        <meshStandardMaterial color={environment === 'beach' ? 'skyblue' : environment === 'pub' ? 'orange' : environment === 'plaza' ? 'lightgreen' : 'pink'} />
      </mesh>
      {user && (
        <mesh position={[2, 0, 0]}>
          <boxGeometry args={[1, 1, 1]} />
          <meshStandardMaterial color="yellow" />
        </mesh>
      )}
    </>
  )
}

export default function NovaSpaceApp() {
  const [environment, setEnvironment] = useState('personal')
  const [user, setUser] = useState(null)

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        setUser(currentUser)
        const userDoc = doc(db, 'users', currentUser.uid)
        const userSnap = await getDoc(userDoc)
        if (!userSnap.exists()) {
          await setDoc(userDoc, {
            uid: currentUser.uid,
            email: currentUser.email,
            avatar: '',
            displayName: currentUser.displayName || 'New User'
          })
        }
      } else {
        setUser(null)
      }
    })
    return () => unsubscribe()
  }, [])

  const signInWithGoogle = async () => {
    const provider = new GoogleAuthProvider()
    try {
      await signInWithPopup(auth, provider)
    } catch (error) {
      console.error('Error signing in:', error)
    }
  }

  return (
    <div className="w-full h-screen bg-gray-900 text-white flex flex-col items-center">
      <div className="p-4 space-x-2">
        {Object.entries(environments).map(([key, name]) => (
          <button
            key={key}
            onClick={() => setEnvironment(key)}
            className="px-4 py-2 bg-blue-500 rounded hover:bg-blue-600"
          >
            {name}
          </button>
        ))}
        {!user && (
          <button
            onClick={signInWithGoogle}
            className="px-4 py-2 bg-green-500 rounded hover:bg-green-600"
          >
            Sign In with Google
          </button>
        )}
        {user && (
          <div className="ml-4">
            Logged in as {user.displayName || user.email}
          </div>
        )}
      </div>
      <Canvas className="flex-1 w-full">
        <Scene environment={environment} user={user} />
        <OrbitControls />
      </Canvas>
    </div>
  )
}
